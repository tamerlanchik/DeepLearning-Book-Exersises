import tensorflow as tf
from tensorflow.examples.tutorials.mnist import input_data
mnist = input_data.read_data_sets("MNIST_data/", one_hot=True)

def getLayer(base_layer, conv_core_size, channels_count, filters_count, sampling_step):
    W_conv_i = tf.Variable(tf.truncated_normal(
        [conv_core_size, conv_core_size, channels_count, filters_count],
        stddev=0.1, mean=0.0))
    b_conv_i = tf.Variable(tf.constant(0.1, shape=[filters_count]))
    conv_i = tf.nn.conv2d(
        base_layer, W_conv_i, strides=[1]*4, padding="SAME") + b_conv_i
    h_conv_i = tf.nn.relu(conv_i)
    h_pool_i = tf.nn.max_pool(
        h_conv_i, ksize=[1, sampling_step, sampling_step, 1],
                strides=[1, sampling_step, sampling_step, 1],
                padding="SAME"
        )
    return h_pool_i

IMAGE_SIZE      = 28
CLASS_COUNT     = 10
IMAGE_CHANNELS  = 1
x = tf.placeholder(tf.float32, [None, IMAGE_SIZE**2])
y = tf.placeholder(tf.float32, [None, CLASS_COUNT])
x_image = tf.reshape(x, [-1, IMAGE_SIZE, IMAGE_SIZE, IMAGE_CHANNELS])  # -1 means unknown mini-batch size

# CONV_CORE_SIZE, FILTERS_COUNT = 5, 32
# W_conv_1 = tf.Variable(tf.truncated_normal(
#         [CONV_CORE_SIZE, CONV_CORE_SIZE, IMAGE_CHANNELS, FILTERS_COUNT],
#         stddev=0.1, mean=0.0))
# b_conv_1 = tf.Variable(tf.constant(0.1, shape=[FILTERS_COUNT]))
# conv_1 = tf.nn.conv2d(
#     x_image, W_conv_1, strides=[1]*4, padding="SAME") + b_conv_1
# h_conv_1 = tf.nn.relu(conv_1)
#
# # Sampling layout (дискретизация)
# SAMPLING_STEP = 2
# h_pool_1 = tf.nn.max_pool(
#     h_conv_1, ksize=[1, SAMPLING_STEP, SAMPLING_STEP, 1],
#             strides=[1, SAMPLING_STEP, SAMPLING_STEP, 1],
#             padding="SAME"
# )

LAYER_OUTPUTS_MAP = [1, 32, 64]
SAMPLING_STEPS = [0, 2, 2]
# 1-st layer
h_pool_1 = getLayer(base_layer=x_image, conv_core_size=5, channels_count=LAYER_OUTPUTS_MAP[0],
                    filters_count=LAYER_OUTPUTS_MAP[1], sampling_step=2)

# 2-nd layer
h_pool_2 = getLayer(base_layer=h_pool_1, conv_core_size=5, channels_count=LAYER_OUTPUTS_MAP[1],
                    filters_count=LAYER_OUTPUTS_MAP[2], sampling_step=2)

# Two-dim to single-dim layer
OUTPUT_SIZE = int(LAYER_OUTPUTS_MAP[2]*( IMAGE_SIZE/(SAMPLING_STEPS[1]*SAMPLING_STEPS[2]) )**2) # 64*7*7
h_pool_2_flat = tf.reshape(h_pool_2, [-1, OUTPUT_SIZE])

# Full-bounded layers
LAYOUT_OUTPUTS_MAP = [OUTPUT_SIZE, 1024, 10]
# 1-st full-connected
W_fc_1 = tf.Variable(tf.truncated_normal([LAYOUT_OUTPUTS_MAP[0], LAYOUT_OUTPUTS_MAP[1]],
                                         stddev=0.1))
b_fc_1 = tf.Variable(tf.constant(0.1, shape=[LAYOUT_OUTPUTS_MAP[1]]))
h_fc_1 = tf.nn.relu(tf.matmul(h_pool_2_flat, W_fc_1) + b_fc_1)

keep_probability = tf.placeholder(tf.float32)
h_fc_1_drop = tf.nn.dropout(h_fc_1, keep_probability)

# 2-nd full-connected
W_fc_2 = tf.Variable(tf.truncated_normal([LAYOUT_OUTPUTS_MAP[1], LAYOUT_OUTPUTS_MAP[2]],
                                         stddev=0.1))
b_fc_2 = tf.Variable(tf.constant(0.1, shape=[LAYOUT_OUTPUTS_MAP[2]]))

logit_conv = tf.matmul(h_fc_1_drop, W_fc_2) + b_fc_2
y_conv = tf.nn.softmax(logit_conv)

# Optimization
cross_entropy = tf.reduce_mean(
    tf.nn.softmax_cross_entropy_with_logits(logits=logit_conv, labels=y)
)
train_step = tf.train.AdamOptimizer(10**(-4)).minimize(cross_entropy)

# Estimate accuracy
correct_prediction = tf.equal(tf.argmax(y_conv, 1), tf.argmax(y, 1))
accuracy = tf.reduce_mean(tf.cast(correct_prediction, tf.float32))


with tf.Session() as sess:
    sess.run(tf.global_variables_initializer())
    for i in range(10**3):
        batch_xs, batch_ys = mnist.train.next_batch(64)
        sess.run(train_step,
            feed_dict={x: batch_xs, y: batch_ys, keep_probability: 0.5}
        )
        print(i)
        if (i+1)%100 == 0:
            print(sess.run(accuracy,
                feed_dict={x:mnist.test.images, y: mnist.test.labels, keep_probability: 1.}))

    print(sess.run(accuracy,
           feed_dict={x:mnist.test.images, y: mnist.test.labels, keep_probability: 1.}))

# After 1000 epochs: accuracy = 0.9684
